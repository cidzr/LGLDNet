model:
  base_learning_rate: 1e-5   # set to target_lr by starting main.py with '--scale_lr False'
  target: ldm.models.diffusion.ddpm.LGLD
  params:
    beta_schedule: "cosine"
    num_timesteps_cond: 1
    original_elbo_weight: 0.
    l_simple_weight: 1.
    l_cond_weight: 1.
    l_bce_weight: 1.
    l_seg_weight: 1.
    log_every_t: 200
    timesteps: 1000
    ddim_steps: 20
    loss_type: "smooth_l1"
    first_stage_key: "segmentation"
    cond_stage_key: "image"
    conditioning_key: "hybrid"
    image_size: 32
    channels: 8
    first_stage_trainable: True
    cond_stage_trainable: True
    scale_by_std: True
    use_ema: True
    load_only_unet: False
    pred_posterior: True
    parameterization: 'x0'
    monitor: 'val/IOU'
    mode: 'max'
    frozen_encoder: True
    ddim_test: True
    vis_env: " Unet ch 64"
#    ckpt_path: ""

    scheduler_config: # 10000 warmup steps, for Unet
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 10000 ]
        cycle_lengths: [ 100000000 ]
        f_start: [ 1.e-5 ]
        f_max: [ 1. ]
        f_min: [ 1. ]

    scheduler_config_ae: # for ImageEncoder and Decoder
      target: ldm.lr_scheduler.LambdaWarmUpCosineScheduler2
      params:
        warm_up_steps: [ 0, 0 ]
        cycle_lengths: [ 60000, 100000000 ]
        f_start: [ 10.0, 0.1 ]
        f_max: [ 10.0, 0.1 ]
        f_min: [ 0.1, 0.1 ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32
        in_channels: 12
        out_channels: 8
        model_channels: 64
        attention_resolutions: [ 1,2,4,8 ]
        num_res_blocks: 2
        channel_mult: [ 1,2,2,4,4 ]
        num_heads: 8
        dropout: 0.
        use_scale_shift_norm: true
        resblock_updown: true
        use_spatial_transformer: true
        transformer_depth: 1
        context_dim: 128

    first_stage_config:
      target: ldm.modules.encoders.modules.VAEInterface
      params:
        stage: "first_stage"
        ckpt_path: "models/LabelEncoder/LabelEncoder_NUDT_VAE.ckpt"
        ignore_keys: [ decoder ]
        kl_weight: 0.00001
        ddconfig:
          z_size: 32
          z_channels: 4
          double_z: true
          resolution: 256
          in_channels: 1
          out_ch: 1
          ch_e: 16
          ch_d: 16
          ch_mult: [ 1,2,4,8 ]  # num_down = len(ch_mult)-1
          num_res_blocks_e: [ 2,2,3,3 ]
          num_res_blocks_d: [ 3,3,4,4 ]
          attn_resolutions: [ ]
          skip_connection: true
          use_freq_attn: false
          use_ch_attn: false

    cond_stage_config:
      target: ldm.modules.encoders.modules.VAEInterface
      params:
        stage: "cond_stage"
#        ckpt_path: "models/LabelEncoder/LabelEncoder_NUDT_VQ.ckpt"
#        ignore_keys: [ decoder ]
        ddconfig:
          embed_dim: 4
          double_z: false
          z_channels: 4
          z_size: 32
          resolution: 256
          in_channels: 1
          out_ch: 1
          ch_e: 16
          ch_mult: [ 1,2,4,8 ]  # num_down = len(ch_mult)-1
          num_res_blocks_e: [ 2,2,3,3 ]
          attn_resolutions: [ ]
          skip_connection: true
          use_freq_attn: true
          use_ch_attn: true

data:
  target: main.DataModuleFromConfig
  params:
    train_batch_size: 8
    val_batch_size: 8
    test_batch_size: 8
    wrap: True
    num_workers: 8
    train:
      target: ldm.data.datasets.DataTrain
      params:
        name: NUDT
        size: 256
        transform_enhance: false
        use_distance_transform: false
    validation:
      target: ldm.data.datasets.DataValidation
      params:
        name: NUDT
        size: 256
        transform_enhance: false
        use_distance_transform: false
    test:
      target: ldm.data.datasets.DataTest
      params:
        name: NUDT
        size: 256
        transform_enhance: false
        use_distance_transform: false

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 2000
        max_images: 8
        increase_log_steps: False

  trainer:
    max_epochs: 500
    benchmark: True
    check_val_every_n_epoch: 1
    accumulate_grad_batches: 1
    gpus: [ 0 ]
#    resume_from_checkpoint: ""
